###EP1
* 设计模式最重要的特征之一就是对象的重用。
* OOP和设计模式的主要作用之一就是能够改变单个模块而不破坏整个程序。
* 设计模式提供了一种编程方法，每个人在完成自己的工作的同时，都能了解其他人的工作并与之协同配合。他们不用知道另一个工人的工作细节，只需要知道他们在为同一个计划努力。


###EP2
* 把抽象类中的方法看作是一个合约，强制所有子类继承，所以他们必须遵循同样的标准。
* 对于一个抽象方法，只要保证有正确的签名和可见性，就能修改它的具体实现。
* 与大多数接口一样，接口也有抽象方法。不过，不能像在抽象类中那样在接口中包含具体方法或变量（作为抽象性的例外，接口中可以包含具体常量）

* 从实际的开发来讲，强制数据类型可以确保倘若给定方法中使用了代码提示，那么其中使用的对象（类）必然有给定的接口。另外，如果把一个接口（可以是一个抽象类或接口）
作为代码提示，绑定会更宽松；他会帮订到接口而不是绑定到一个特定的实现。随着程序变得越来越大，只要遵循接口，就可以做任何改变而不会对程序造成破坏。不仅如此，所做的修改也不会与具体实现纠缠不清。
* 不能使用标量类型 （如string或int）作为代码提示，不过可以使用数组、接口（如前例）和类作为代码提示。所以尽管没有另外一些语言那么灵活，但PHP可以通过类型提示实现类型，这在OOP和设计模式编程重起着重要作用。
* 封装就是划分一个抽象的诸多元素的过程，这些元素构成该抽象的结构和行为；封装的作用就是将抽象的契约接口与其实现分离。

* 保持封装同时保持对象（类）之间通信的过程正是设计模式的一个工作。要找出一种方法来建立通信，同时不破坏封装，这可能很困难，所以设计模式就相当于一种“秘诀”，可以指出如何使用可通信的类建立一个程序。

* 继承有助于为程序中包含的不同类建立一种结构。不过，为了保证类之间的松绑定，通常会继承抽象类，而且是浅继承，只有一层子类。如果程序通过深层次继承绑定到具体类，即使对父类做简单的修改，也会对子类带来严重的破坏。

###EP3
* 一个对象实例的数据类型不仅是它实例化的对象类型，该对象的父类也将作为他的数据类型。
* 可以利用代码提示保证按接口编程。
* 应当优先选择对象组合而不是类继承
* 开发程序时如果有机会使用组合，就应当优先使用组合而不是继承。
* 在较大的程序中，组合可以避免维护多个继承层次上的各个子类，而且还可以避免可能导致的错误。例如，父类的一个改变会逐级向下传递到子类实现，这可能会影响子类使用的某个算法。

####委托： IS-A和HAS-A的差别
* 在设计模式领域中，你会看到有些类的构造中使用了其他类。一个类将一个任务传递给另一个类时，这就是委托。正式这一点使组合拥有了强大的能力。

* 使用继承时，每一个子类是另一个类或多个类的一部分（IS-A关系）；而采用组合，对象可以使用一个不同的类或一组类完成一系列任务（USE-A）关系，这并不是说不能使用继承。要避免使用继承形成的一大串子类、孙子类、曾孙子类等，设计模式方法建议使用浅继承。
另外倘若一个具体类有子类，修改这个类设计可能导致程序崩溃，而浅继承可以避免这种情况。

* 设计模式和框架的区别：与框架相比，设计模式是体系结构中更小的元素，也更为抽象。另外，设计模式没有框架那么特定。因此，设计模式更可重用，也比框架更灵活。
* 框架的有点与模板有些类似：它们更有指示性，可以更清楚地指示所解决问题的结构。为了提供这种易用性，他们不得不放弃了体系结构的灵活性。如果使用框架，构建应用会快得多，但是所构建的应用会受到框架本身的约束。框架可以包含面向对象结构，通常框架是分层的，
每一层处理更大设计中的一个方面。框架的一些特性在设计模式中也有体现，不过，设计模式没有框架那么特定和具体，也没有那么庞大。
